import re
from typing import Callable
from tasks.common_functions import get_string_until

"""
Write a program where you prompt the user for a string until it contains alternating uppercase letters and digits.
An example of a string meeting this criterion is A9B3C7.
Based on the entered string, generate a new string where each digit is replaced by numbers that are divisors
of the digit. 
For example, for the string B9, the result is B139,
"""


def does_string_match_regex(text: str, regex: str = r'^([A-Z]\d)*$') -> bool:
    """
    Check if the string matches a given regular expression pattern.

    Parameters:
        text (str): The string to be checked.
        regex (str, optional): The regular expression pattern.

    Returns:
        bool: True if the string matches the pattern, False otherwise.
    """

    if not re.match(regex, text):
        return False
    return True


def get_divisors(n: int) -> list[int] | float:
    """
    Get the divisors of a given integer.

    Parameters:
        n (int): The integer for which divisors are to be found.

    Returns:
        list[int] | float: A list of divisors of the integer.
            Returns infinity if the input is 0.

    Example:
       Input: n = 12
        Output: [1, 2, 3, 4, 6, 12]
    """

    if n == 0:
        return float('inf')
    nn = abs(n) if n < 0 else n
    divisors = {1: [1], 2: [1, 2], 3: [1, 3]}
    if nn in divisors:
        return divisors[n]

    divisors_list = [1]
    i = 2
    while i * i < nn:
        if nn % i == 0:
            divisors_list.extend([i, nn // i])
        i += 1
    if i * i == nn:
        divisors_list.append(i)
    return sorted(divisors_list + [n])


def get_pairs_matching_regex(text: str, regex: str = r'([A-Z])(\d)') -> list[tuple[str, str]]:
    """
    Extract pairs of uppercase letters and digits from the input string.

    Parameters:
        text (str): The input string.

    Returns:
        list[tuple[str, int]]: A list of tuples containing uppercase letters and their corresponding digits.
        :param text:
        :param regex:
    """

    pairs = re.findall(regex, text)
    return [(char1, char2) for char1, char2 in pairs]


print(get_pairs_matching_regex("2a8B9Z",r'(\d)([A-Za-z])'))


def digit_to_str(digit: int) -> str:
    """
    Convert a digit to its string representation.

    Parameters:
        digit (int): The digit to convert.

    Returns:
        str: The string representation of the digit.
    """

    d_str = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine"
    }
    return d_str[digit]


def get_digit_divisors(digit: int) -> str:
    """
    Get the divisors of a digit and return them as a concatenated string.

    Parameters:
        digit (int): The digit for which divisors are to be found.

    Returns:
        str: A string containing the divisors of the digit.
    """

    divisors = get_divisors(digit)
    return ''.join(str(d) for d in divisors)


def replace_digits_with(text: str, replacer_fn: Callable[[int], str]) -> str:
    """
    Replace digits in a string with custom replacements generated by a replacer function.

    Parameters:
        text (str): The input string containing alternating uppercase letters and digits.
        replacer_fn: A function that takes an integer (digit) and returns a string.

    Returns:
        str: The modified string where digits are replaced with custom values generated by the replacer function.

    Example:
        Input: B9D5
        Output: B139D15
    """

    pairs = get_pairs_matching_regex(text)
    modified_items = []
    for char, digit in pairs:
        replacement = replacer_fn(int(digit))

        modified_items.extend([char] + [replacement])
    return "".join(modified_items)


def main() -> None:
    text = "B9D5"
    print(get_pairs_matching_regex(text))
    print(replace_digits_with(text, lambda digit: get_digit_divisors(digit)))


if __name__ == '__main__':
    main()
